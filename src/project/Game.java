/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import javax.swing.Timer;

/**
 *
 * @author hp
 */
public class Game extends javax.swing.JFrame {

    /**
     * Creates new form Game
     */
    
    private IGameCallback callback;
    public int PlayerPoints;
    public ArrayList<Wall> walls;    
    public Player playerInst;
    
    public Game() {
        initComponents();
        
        Timer gameTimer = new Timer(20000, evt -> {
            callback.GameFinished();
            this.dispose();
        });
        gameTimer.setRepeats(false);
        gameTimer.start();
        
        InitializeGameComponents();
        WallMovement();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PlayerObj = new javax.swing.JButton();
        WallObj1 = new javax.swing.JButton();
        WallObj3 = new javax.swing.JButton();
        WallObj4 = new javax.swing.JButton();
        WallObj2 = new javax.swing.JButton();
        WallObj5 = new javax.swing.JButton();
        WallObj6 = new javax.swing.JButton();
        WallObj7 = new javax.swing.JButton();
        WallObj8 = new javax.swing.JButton();
        GoalObj = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Game");
        setResizable(false);

        PlayerObj.setBackground(new java.awt.Color(0, 204, 255));
        PlayerObj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayerObjActionPerformed(evt);
            }
        });
        PlayerObj.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PlayerObjKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                PlayerObjKeyReleased(evt);
            }
        });

        WallObj1.setForeground(new java.awt.Color(153, 153, 153));

        WallObj3.setForeground(new java.awt.Color(153, 153, 153));

        WallObj4.setForeground(new java.awt.Color(153, 153, 153));

        WallObj2.setForeground(new java.awt.Color(153, 153, 153));

        WallObj5.setForeground(new java.awt.Color(153, 153, 153));

        WallObj6.setForeground(new java.awt.Color(153, 153, 153));

        WallObj7.setForeground(new java.awt.Color(153, 153, 153));

        WallObj8.setForeground(new java.awt.Color(153, 153, 153));

        GoalObj.setBackground(new java.awt.Color(51, 255, 51));
        GoalObj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoalObjActionPerformed(evt);
            }
        });
        GoalObj.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                GoalObjKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                GoalObjKeyReleased(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(WallObj4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(WallObj7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(164, 164, 164)
                                .addComponent(WallObj6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(97, 97, 97)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(PlayerObj, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(WallObj8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(WallObj1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(141, 141, 141)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                .addComponent(WallObj2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(GoalObj, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(WallObj3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)
                        .addComponent(WallObj5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(155, 155, 155))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(WallObj1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(WallObj4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(WallObj6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(PlayerObj, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(WallObj2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(WallObj8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(WallObj5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(WallObj3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(WallObj7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(GoalObj, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void PlayerObjKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PlayerObjKeyPressed
        // TODO add your handling code here:
        
        int keyCode = evt.getKeyCode();
        int movSpd = playerInst.getCurrMovSpd();
        
        int x = PlayerObj.getLocation().x;
        int y = PlayerObj.getLocation().y;

        switch(keyCode) {
            case KeyEvent.VK_UP:
                y -= movSpd;
                break;
            case KeyEvent.VK_DOWN:
                y += movSpd;
                break;
            case KeyEvent.VK_LEFT:
                x -= movSpd;
                break;
            case KeyEvent.VK_RIGHT:
                x += movSpd;
                break;
        }

        playerInst.setDirLastMoved(
                new Coords(
                    PlayerObj.getLocation().x - x,
                    PlayerObj.getLocation().y - y
                )
        );
        
        PlayerObj.setLocation(x, y);
        
        // Check For Collisions
        PlayerCollision();
    }//GEN-LAST:event_PlayerObjKeyPressed

    private void PlayerObjKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PlayerObjKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_PlayerObjKeyReleased

    private void PlayerObjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayerObjActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PlayerObjActionPerformed

    private void GoalObjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoalObjActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GoalObjActionPerformed

    private void GoalObjKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_GoalObjKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_GoalObjKeyPressed

    private void GoalObjKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_GoalObjKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_GoalObjKeyReleased

    private void InitializeGameComponents() {
        playerInst = new Player(5, 5);
        PlayerPoints = 0;
        walls = new ArrayList<>(Arrays.asList(
                new Wall(WallObj1, new Coords(0, -5)),
                new Wall(WallObj2, new Coords(0, 5)),
                new Wall(WallObj3, new Coords(5, 0)),
                new Wall(WallObj4, new Coords(5, 0)),
                new Wall(WallObj5, new Coords(0, 5)),
                new Wall(WallObj6, new Coords(0, 5)),
                new Wall(WallObj7, new Coords(-5, 0)),
                new Wall(WallObj8, new Coords(5, 0))
        ));
        
        for(Wall wall : walls) {
            wall.getWallObj().addMouseListener(new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    //
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    //
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    //
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    wall.setCoords(new Coords(0, 0));
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    wall.ResetMoveCoords();
                }
            });
        }
        
    }
    
    private void PlayerCollision() {
        
        for (Wall wall : walls) {
            if (PlayerObj.getBounds().intersects(wall.getWallObj().getBounds())) {
                // Undo Last Move
                // Prevent Player From Moving If On Top Of Wall
                PlayerObj.setLocation(
                        PlayerObj.getLocation().x + playerInst.getDirLastMoved().x,
                        PlayerObj.getLocation().y + playerInst.getDirLastMoved().y
                );
            }
        }
        
        if (PlayerObj.getBounds().intersects(GoalObj.getBounds())) {
            // Add Points To Player
            PlayerPoints += 10;
            
            // Select Random Coord within Frame
            GoalObj.setLocation(
                    new Random().nextInt(this.getSize().width-50),
                    new Random().nextInt(this.getSize().height-100)
            );
        }
    }
    
    private void WallMovement() {
        
        Timer t1 = new Timer(2000, event -> {
            for (Wall wall : walls) {
                wall.getCoords().x *= -1;
                wall.getCoords().y *= -1;
            }
        });
        t1.start();
        
        Timer t2 = new Timer(100, event -> {
            for (Wall wall : walls) {
                wall.getWallObj().setLocation(
                    wall.getWallObj().getLocation().x + wall.getCoords().x,
                    wall.getWallObj().getLocation().y + wall.getCoords().y
                );
                
                WallCollision(wall);
            }
        });
        t2.start();
    }
    
    private void WallCollision(Wall wall) {
        if (wall.getWallObj().getBounds().getMinX() < 0) {
            wall.getWallObj().setLocation(this.getSize().width-40, wall.getWallObj().getLocation().y);
        }
        
        if (wall.getWallObj().getBounds().getMaxX() > this.getSize().width) {
            wall.getWallObj().setLocation(5, wall.getWallObj().getLocation().y);
        }
        
        if (wall.getWallObj().getBounds().getMaxY() < 5) {
            wall.getWallObj().setLocation(wall.getWallObj().getLocation().x, this.getSize().height-95);
        }
        
        if (wall.getWallObj().getBounds().getMinY() > this.getSize().height-90) {
            wall.getWallObj().setLocation(wall.getWallObj().getLocation().x, 2);
        }
    }
    
    public void SetCallback(IGameCallback callback) {
        this.callback = callback;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GoalObj;
    private javax.swing.JButton PlayerObj;
    private javax.swing.JButton WallObj1;
    private javax.swing.JButton WallObj2;
    private javax.swing.JButton WallObj3;
    private javax.swing.JButton WallObj4;
    private javax.swing.JButton WallObj5;
    private javax.swing.JButton WallObj6;
    private javax.swing.JButton WallObj7;
    private javax.swing.JButton WallObj8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
